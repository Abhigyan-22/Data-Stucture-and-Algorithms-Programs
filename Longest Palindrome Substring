Q) Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

class Solution:
    def longestPalindrome(self, s: str) -> str:
        
       
        if len(s)<=1 or len(set(s))==1:
            print("in")
            return s
        
        r = s[::-1]
        
        dp = [[0]*(len(s)+1)for i in range(len(s)+1)]
        
        q = []
        
        
        for i in range(len(s)+1):
            for j in range(len(s)+1):
            
                
                if i==0 or j==0:
                    dp[i][j] = 0
                    continue
                
                if s[i-1]==r[j-1]:
                    dp[i][j] = 1+dp[i-1][j-1]
                    heapq.heappush(q,[-dp[i][j],i,j])
                
                else:
                    dp[i][j] = 0
                    

            
        ans =""

        
        while q:
            x,i,j = heappop(q)
            
            while i>=0 and j>=0 and dp[i][j]!=0:
                ans+=s[i-1]
                i-=1
                j-=1
            if ans==ans[::-1]:
                return ans
            ans = ""
            
        return ans
