//stack using singly linked list
#include<stdio.h>
#include<stdlib.h>
struct node{           //node initialization
    int info;
    struct node* link;
};
typedef struct node *NODE;
NODE getnode()           //node memory allocation
{
    NODE x=(NODE)malloc(sizeof(struct node));
    if(x==NULL){
        printf("Mem not available");
        exit(1);
    }
    return x;
}
void Print_LinkedList(NODE first)    //printing linked list
{
   NODE cur=first;
   while(cur!=NULL)
   {
       printf("%d  ",(*cur).info);
       cur=cur->link;
   }
}
NODE delete_front(NODE first)       //delete front node
{
    if(first==NULL)
    {
        printf("Linked list doesn't exists\n");
        return NULL;
    }
    NODE temp=first;
    temp=temp->link;
    free(first);
    return temp; 
}
NODE insert_front(int item,NODE first)
{
    NODE new_node=getnode();
    new_node->info=item;
    new_node->link=(first);
    return new_node;
}
int main()
{
    int choice,item;
    NODE first;
    
 
    printf("\n\t STACK OPERATIONS USING LINKED LIST");
    printf("\n\t--------------------------------");
    printf("\n\t 1.PUSH\n\t 2.POP\n\t 3.DISPLAY\n\t 4.EXIT");
    do{
        
        printf("\nEnter the choice: ");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:{  //PUSH
                printf("enter value to be pushed:");
                scanf("%d",&item);
                first=insert_front(item,first);
                break;
                }   
            case 2:   //POP
                {
                    first=delete_front(first);
                    break;
                }
            case 3:   //DISPLAY
                {
                    Print_LinkedList(first);
                    break;
                }
            case 4:
                {
                    printf("\n\tEXIT POINT");
                    break;
                }
            default:
                {
                    printf("\n\tEnter a valid choice (1/2/3/4)");
                
                }
        }
        
    }while (choice!=4);
    return 0;
    
}
