//queue operations using linked lists
#include <stdio.h>
#include<stdlib.h>
struct node{
    int info;
    struct node *link;
};
typedef struct node *NODE;
NODE getnode()
{
    NODE x=(NODE)malloc(sizeof(struct node));
    if(x==NULL){
        printf("Mem not available\n");
        exit(0);
    }
    return x;
}
NODE insert_rear(NODE y,int item)
{
    NODE new_node=getnode();
    new_node->info=item;
    new_node->link=NULL;
    if(y==NULL)
        return new_node;
    NODE cur=y;
    while(cur->link!=NULL){
        cur=cur->link;
    }
    cur->link=new_node;
    return y;
    
}
NODE delete_front(NODE y)
{
    if(y==NULL){
        printf("Deletion not possible,linked list is empty\n");
        return y;
    }
    else{
        NODE cur=y;
        y=cur->link;
        free(cur);
        return y;
    }
}
void display(NODE y)
{
    NODE cur=y;
    if(y==NULL)
        printf("Linked list is empty\n");
    while(cur!=NULL){
        printf("%d  ",cur->info);
        cur=cur->link;
    }
}
int main()
{
    {
    int choice,item;
    NODE first;
    
 
    printf("\n\t QUEUE OPERATIONS USING LINKED LIST");
    printf("\n\t--------------------------------");
    printf("\n\t 1.INSERT\n\t 2.DELETE\n\t 3.DISPLAY\n\t 4.EXIT");
    do{
        
        printf("\nEnter the choice: ");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:{  //INSERT
                printf("enter value to be inserted:");
                scanf("%d",&item);
                first=insert_rear(first,item);
                break;
                }   
            case 2:   //DELETE
                {
                    first=delete_front(first);
                    break;
                }
            case 3:   //DISPLAY
                {
                    display(first);
                    break;
                }
            case 4:
                {
                    printf("\n\tEXIT POINT");
                    break;
                }
            default:
                {
                    printf("\n\tEnter a valid choice (1/2/3/4)");
                
                }
        }
        
    }while (choice!=4);
    return 0;
    
}

}

